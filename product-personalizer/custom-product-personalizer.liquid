{{ 'custom-product-personalizer.css' | asset_url | stylesheet_tag }}

{% liquid
  assign section_personalize_product = section.settings.personalize_product
  assign personalize_product = all_products[section_personalize_product]
%}

<div class="personalizer-loading" id="personalizer-loadingIndicator">
    <div class="personalizer-spinner"></div>
    Generating your design... Please wait
</div>
<input type="file" id="personalizer-imageUpload" class="personalizer-file-input" accept="image/*">
<div class="personalizer-container">
    <header class="personalizer-header">
        <h1 class="personalizer-h1">Custom Shirt Designer</h1>
        <p class="personalizer-subtitle">Design your perfect shirt with custom colors and accessories</p>
    </header>
    
    <div class="personalizer-designer-container">
        <div class="personalizer-canvas-container">
            <div class="personalizer-design-canvas" id="personalizer-designCanvas">
                <img src="{{ personalize_product.featured_image | image_url }}" alt="Shirt" class="personalizer-shirt-base" id="personalizer-shirtBase" width="auto" height="auto">
                <!-- Live preview text -->
                <div class="personalizer-live-preview-text" id="personalizer-livePreviewText"></div>
            </div>
            <div class="personalizer-action-buttons">
                <button class="personalizer-btn personalizer-btn-primary" id="personalizer-downloadDesign">Download Design</button>
                <button class="personalizer-btn personalizer-btn-secondary" id="personalizer-resetDesign">Reset Design</button>
            </div>
        </div>
        
        <div class="personalizer-controls">
            {% assign color_metafield_key = section.settings.color_meta_key %}
            {% assign color_metafield_namespace = section.settings.color_meta_namespace %}
            {% assign color_name_field = section.settings.color_meta_name %}
            {% assign color_image_field = section.settings.color_meta_image %}
            {% assign color_list = personalize_product.metafields[color_metafield_key][color_metafield_namespace].value %}
            
            {% if color_metafield_key != blank and color_metafield_namespace != blank %}
                <div class="personalizer-control-section">
                    <h2 class="personalizer-h2">Shirt Color</h2>
                    <div class="personalizer-color-options">

                    <!-- Featured Product Image -->
                    <div class="personalizer-color-option active" data-image="{{ personalize_product.featured_image | image_url }}">
                        <img src="{{ personalize_product.featured_image | image_url }}" alt="{{ personalize_product.title }}" width="auto" height="auto">
                    </div>

                    <!-- Dynamic Colors from Metaobject -->
                     {% for personalize_color in color_list %}
                        {% assign color_name = personalize_color[color_name_field] %}
                        {% assign color_image = personalize_color[color_image_field] %}

                        {% if color_image %}
                        <div class="personalizer-color-option" data-image="{{ color_image | file_url }}">
                            <img src="{{ color_image | file_url }}" alt="{{ color_name }}" height="auto" width="auto">
                        </div>
                        {% endif %}
                    {% endfor %}

                    </div>
                </div>
            {% endif %}

            
            <div class="personalizer-control-section">
                <h2 class="personalizer-h2">Add Accessories</h2>
                <div class="personalizer-accessory-options">
                    {%- for block in section.blocks -%}
                        {%- if block.type == 'accessory_category' -%}
                            <div class="personalizer-accessory-option" data-type="{{ block.settings.category_name | handleize }}">
                                <img src="{{ block.settings.category_icon | img_url: '40x40' }}" alt="{{ block.settings.category_name }}" height="auto" width="auto">
                                <span>{{ block.settings.category_name }}</span>
                            </div>
                        {%- endif -%}
                    {%- endfor -%}
                    <div class="personalizer-accessory-option personalizer-upload-option" id="personalizer-uploadAccessory">
                        <div style="font-size: 24px; margin-bottom: 5px;">üìÅ</div>
                        <span>Upload</span>
                    </div>
                    <div class="personalizer-accessory-option personalizer-text-option" id="personalizer-addTextOption" data-type="text">
                        <div style="font-size: 24px; margin-bottom: 5px;">‚úèÔ∏è</div>
                        <span>Add Text</span>
                    </div>
                </div>
              
                {%- for block in section.blocks -%}
                    {%- if block.type == 'accessory_category' -%}
                        <div class="personalizer-sub-options" id="personalizer-{{ block.settings.category_name | handleize }}Options">
                            <div class="personalizer-sub-options-header">{{ block.settings.category_name }} Designs</div>
                            <div class="personalizer-sub-options-grid">
                                {% for i in (1..20) %}
                                    {% assign dynamic_style_id = 'style_' | append: i %}
                                    {% assign style_img = block.settings[dynamic_style_id] %}
                                    {% if style_img != blank %}
                                        <div class="personalizer-sub-option" data-src="{{ style_img | image_url }}" data-type="{{ block.settings.category_name | handleize }}">
                                            <img src="{{ style_img | image_url }}" alt="{{ block.settings.category_name }}" width="auto" height="auto">
                                        </div>
                                    {% endif %}
                                {% endfor %}
                            </div>
                        </div>
                    {%- endif -%}
                {%- endfor -%}

                <!-- Uploaded Accessories Section -->
                <div class="personalizer-uploaded-accessories" id="personalizer-uploadedAccessories" style="display: none;">
                    <h4>Uploaded Accessories</h4>
                    <div class="personalizer-uploaded-options" id="personalizer-uploadedOptions">
                    </div>
                </div>

                <!-- Text Customization Section -->
                <div class="personalizer-text-customization" id="personalizer-textCustomization">
                    <h4>Add Custom Text</h4>
                    <div class="personalizer-text-input-group">
                        <label for="personalizer-textInput">Enter Text:</label>
                        <input type="text" id="personalizer-textInput" placeholder="Enter your text here" maxlength="50">
                    </div>
                    
                    <div class="personalizer-text-input-group">
                        <label>Font Style:</label>
                        <div class="personalizer-font-options">
                            <div class="personalizer-font-option active" data-font="Arial" style="font-family: Arial;">Aa</div>
                            <div class="personalizer-font-option" data-font="Times New Roman" style="font-family: 'Times New Roman';">Aa</div>
                            <div class="personalizer-font-option" data-font="Courier New" style="font-family: 'Courier New';">Aa</div>
                            <div class="personalizer-font-option" data-font="Georgia" style="font-family: Georgia;">Aa</div>
                            <div class="personalizer-font-option" data-font="Verdana" style="font-family: Verdana;">Aa</div>
                            <div class="personalizer-font-option" data-font="Impact" style="font-family: Impact;">Aa</div>
                            <div class="personalizer-font-option" data-font="Comic Sans MS" style="font-family: 'Comic Sans MS';">Aa</div>
                            <div class="personalizer-font-option" data-font="Trebuchet MS" style="font-family: 'Trebuchet MS';">Aa</div>
                        </div>
                    </div>

                    <div class="personalizer-text-input-group">
                        <label>Text Color:</label>
                        <div class="personalizer-color-palette">
                            <div class="personalizer-color-swatch active" style="background-color: #000000;" data-color="#000000"></div>
                            <div class="personalizer-color-swatch" style="background-color: #ffffff; border-color: #333;" data-color="#ffffff"></div>
                            <div class="personalizer-color-swatch" style="background-color: #ff0000;" data-color="#ff0000"></div>
                            <div class="personalizer-color-swatch" style="background-color: #0000ff;" data-color="#0000ff"></div>
                            <div class="personalizer-color-swatch" style="background-color: #008000;" data-color="#008000"></div>
                            <div class="personalizer-color-swatch" style="background-color: #ffff00;" data-color="#ffff00"></div>
                            <div class="personalizer-color-swatch" style="background-color: #ff00ff;" data-color="#ff00ff"></div>
                            <div class="personalizer-color-swatch" style="background-color: #ffa500;" data-color="#ffa500"></div>
                        </div>
                    </div>

                    <div class="personalizer-text-input-group">
                        <label for="personalizer-fontSize">Font Size:</label>
                        <select id="personalizer-fontSize">
                            <option value="16">Small (16px)</option>
                            <option value="20">Medium (20px)</option>
                            <option value="24" selected>Large (24px)</option>
                            <option value="32">X-Large (32px)</option>
                            <option value="40">XX-Large (40px)</option>
                        </select>
                    </div>

                    <button class="personalizer-add-text-btn" id="personalizer-addTextBtn">Add Text to Shirt</button>
                </div>
            </div>
            
            <div class="personalizer-instructions">
                <h3>How to Use</h3>
                <ul>
                    <li>Select a shirt color from the options above</li>
                    <li>Click on an accessory type to see available options</li>
                    <li>Click on a specific accessory to add it to your shirt</li>
                    <li>Use the Upload button to add your own images</li>
                    <li>Use Add Text to customize with text, fonts, and colors</li>
                    <li>Text appears live on the shirt as you type and customize</li>
                    <li>Drag accessories to position them as desired</li>
                    <li>Hover over accessories to see controls for rotation, zoom, and deletion</li>
                    <li>Use the Download Design button to save your creation</li>
                </ul>
            </div>
        </div>
    </div>
    
    <footer class="personalizer-footer">
        <p>Custom Shirt Designer &copy; 2023 | Drag and drop to customize your shirt</p>
    </footer>
</div>

<script src="https://html2canvas.hertzen.com/dist/html2canvas.min.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const designCanvas = document.getElementById('personalizer-designCanvas');
        const shirtBase = document.getElementById('personalizer-shirtBase');
        const colorOptions = document.querySelectorAll('.personalizer-color-option');
        const accessoryOptions = document.querySelectorAll('.personalizer-accessory-option');
        const subOptions = document.querySelectorAll('.personalizer-sub-option');
        const downloadButton = document.getElementById('personalizer-downloadDesign');
        const resetButton = document.getElementById('personalizer-resetDesign');
        const loadingIndicator = document.getElementById('personalizer-loadingIndicator');
        const uploadButton = document.getElementById('personalizer-uploadAccessory');
        const imageUpload = document.getElementById('personalizer-imageUpload');
        const uploadedAccessories = document.getElementById('personalizer-uploadedAccessories');
        const uploadedOptions = document.getElementById('personalizer-uploadedOptions');
        
        const addTextOption = document.getElementById('personalizer-addTextOption');
        const textCustomization = document.getElementById('personalizer-textCustomization');
        const textInput = document.getElementById('personalizer-textInput');
        const fontSizeSelect = document.getElementById('personalizer-fontSize');
        const addTextBtn = document.getElementById('personalizer-addTextBtn');
        const fontOptions = document.querySelectorAll('.personalizer-font-option');
        const colorSwatches = document.querySelectorAll('.personalizer-color-swatch');
        const livePreviewText = document.getElementById('personalizer-livePreviewText');
        
        let accessories = [];
        let activeAccessory = null;
        let offsetX, offsetY;
        let currentSubOptions = null;
        let uploadedImages = [];
        
        let selectedFont = 'Arial';
        let selectedColor = '#000000';
        let selectedFontSize = '24';
        let currentTextElement = null;

        // Initialize text customization
        function initializeTextCustomization() {
            fontOptions.forEach(option => {
                if (option.classList.contains('active')) {
                    selectedFont = option.getAttribute('data-font');
                }
            });

            colorSwatches.forEach(swatch => {
                if (swatch.classList.contains('active')) {
                    selectedColor = swatch.getAttribute('data-color');
                }
            });

            selectedFontSize = fontSizeSelect.value;
            updateLivePreview();
        }

        // Update live preview text
        function updateLivePreview() {
            const text = textInput.value.trim();
            if (text) {
                livePreviewText.textContent = text;
                livePreviewText.style.fontFamily = selectedFont;
                livePreviewText.style.color = selectedColor;
                livePreviewText.style.fontSize = selectedFontSize + 'px';
                livePreviewText.classList.add('visible');
            } else {
                livePreviewText.classList.remove('visible');
            }
        }

        // Add text to canvas
        function addTextToCanvas() {
            const text = textInput.value.trim();
            if (!text) {
                alert('Please enter some text');
                return;
            }

            const textContainer = document.createElement('div');
            textContainer.className = 'personalizer-text-container';
            
            const textElement = document.createElement('div');
            textElement.className = 'personalizer-text-element';
            textElement.textContent = text;
            textElement.style.fontFamily = selectedFont;
            textElement.style.color = selectedColor;
            textElement.style.fontSize = selectedFontSize + 'px';
            
            const controls = document.createElement('div');
            controls.className = 'personalizer-text-controls';
            
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'personalizer-control-btn personalizer-delete-btn';
            deleteBtn.innerHTML = '√ó';
            deleteBtn.title = 'Delete text';
            
            const rotateLeftBtn = document.createElement('button');
            rotateLeftBtn.className = 'personalizer-control-btn';
            rotateLeftBtn.innerHTML = '‚Ü∂';
            rotateLeftBtn.title = 'Rotate left';
            
            const rotateRightBtn = document.createElement('button');
            rotateRightBtn.className = 'personalizer-control-btn';
            rotateRightBtn.innerHTML = '‚Ü∑';
            rotateRightBtn.title = 'Rotate right';
            
            controls.appendChild(deleteBtn);
            controls.appendChild(rotateLeftBtn);
            controls.appendChild(rotateRightBtn);
            
            textContainer.appendChild(textElement);
            textContainer.appendChild(controls);
            
            const canvasRect = designCanvas.getBoundingClientRect();
            const centerX = (canvasRect.width / 2) - 50;
            const centerY = (canvasRect.height / 2) - 15;
            
            textContainer.style.left = `${centerX}px`;
            textContainer.style.top = `${centerY}px`;
            
            // Add drag event listener to the entire text container
            textContainer.addEventListener('mousedown', startDrag);
            
            deleteBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                designCanvas.removeChild(textContainer);
            });
            
            let rotation = 0;
            
            rotateLeftBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                rotation -= 15;
                textContainer.style.transform = `rotate(${rotation}deg)`;
            });
            
            rotateRightBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                rotation += 15;
                textContainer.style.transform = `rotate(${rotation}deg)`;
            });
            
            designCanvas.appendChild(textContainer);
            currentTextElement = textContainer;
            
            // Clear input and hide preview
            textInput.value = '';
            livePreviewText.classList.remove('visible');
        }

        // Initialize
        initializeTextCustomization();
        
        function preloadImages() {
            const images = document.querySelectorAll('img[src]');
            const promises = Array.from(images).map(img => {
                return new Promise((resolve, reject) => {
                    img.crossOrigin = 'anonymous';
                    
                    if (img.complete && img.naturalHeight !== 0) {
                        resolve();
                    } else {
                        img.onload = () => resolve();
                        img.onerror = () => {
                            console.warn('Failed to load image:', img.src);
                            resolve();
                        };
                        
                        const src = img.src;
                        img.src = '';
                        img.src = src;
                    }
                });
            });
            return Promise.all(promises);
        }
        
        colorOptions.forEach(option => {
            option.addEventListener('click', function() {
                colorOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                const newImageSrc = this.getAttribute('data-image');
                shirtBase.src = newImageSrc; 
            });
        });
        
        accessoryOptions.forEach(option => {
            option.addEventListener('click', function() {
                const type = this.getAttribute('data-type');
                if (type === 'upload') {
                    imageUpload.click();
                    return;
                }
                
                if (type === 'text') {
                    textCustomization.classList.toggle('active');
                    if (currentSubOptions) {
                        currentSubOptions.classList.remove('active');
                        currentSubOptions = null;
                    }
                    return;
                }
                
                if (currentSubOptions) {
                    currentSubOptions.classList.remove('active');
                }
                
                const subOptionsId = `personalizer-${type}Options`;
                currentSubOptions = document.getElementById(subOptionsId);
                if (currentSubOptions) {
                    currentSubOptions.classList.add('active');
                }
            });
        });
        
        uploadButton.addEventListener('click', function() {
            imageUpload.click();
        });
        
        imageUpload.addEventListener('change', function(e) {
            const files = e.target.files;
            for (let i = 0; i < files.length; i++) {
                const file = files[i];
                if (file.type.match('image.*')) {
                    const reader = new FileReader();
                    reader.onload = function(e) {
                        const imageData = e.target.result;
                        const imageId = 'uploaded-' + Date.now();
                        uploadedImages.push({id: imageId, data: imageData});
                        
                        const uploadedOption = document.createElement('div');
                        uploadedOption.className = 'personalizer-sub-option';
                        uploadedOption.setAttribute('data-src', imageData);
                        uploadedOption.setAttribute('data-type', 'uploaded');
                        uploadedOption.setAttribute('data-id', imageId);
                        
                        const img = document.createElement('img');
                        img.src = imageData;
                        img.alt = 'Uploaded Accessory';
                        img.style.width = '35px';
                        img.style.height = '35px';
                        img.style.objectFit = 'contain';
                        
                        const span = document.createElement('span');
                        span.textContent = 'Custom';
                        
                        const removeBtn = document.createElement('button');
                        removeBtn.className = 'personalizer-remove-upload-btn';
                        removeBtn.innerHTML = '√ó';
                        removeBtn.title = 'Remove from list';
                        
                        removeBtn.addEventListener('click', function(e) {
                            e.stopPropagation();
                            const optionId = uploadedOption.getAttribute('data-id');
                            uploadedImages = uploadedImages.filter(img => img.id !== optionId);
                            uploadedOption.remove();
                            
                            if (uploadedOptions.children.length === 0) {
                                uploadedAccessories.style.display = 'none';
                            }
                        });
                        
                        uploadedOption.appendChild(img);
                        uploadedOption.appendChild(span);
                        uploadedOption.appendChild(removeBtn);
                        
                        uploadedOption.addEventListener('click', function() {
                            const src = this.getAttribute('data-src');
                            const type = this.getAttribute('data-type');
                            addAccessory(src, type);
                            
                            if (currentSubOptions) {
                                currentSubOptions.classList.remove('active');
                                currentSubOptions = null;
                            }
                        });
                        
                        uploadedOptions.appendChild(uploadedOption);
                        uploadedAccessories.style.display = 'block';
                    };
                    reader.readAsDataURL(file);
                }
            }
            imageUpload.value = '';
        });
        
        // Real-time text preview events
        textInput.addEventListener('input', updateLivePreview);
        
        fontSizeSelect.addEventListener('change', function() {
            selectedFontSize = this.value;
            updateLivePreview();
        });

        fontOptions.forEach(option => {
            option.addEventListener('click', function() {
                fontOptions.forEach(opt => opt.classList.remove('active'));
                this.classList.add('active');
                selectedFont = this.getAttribute('data-font');
                updateLivePreview();
            });
        });

        colorSwatches.forEach(swatch => {
            swatch.addEventListener('click', function() {
                colorSwatches.forEach(s => s.classList.remove('active'));
                this.classList.add('active');
                selectedColor = this.getAttribute('data-color');
                updateLivePreview();
            });
        });

        // Add text on button click
        addTextBtn.addEventListener('click', addTextToCanvas);

        // Add text on Enter key
        textInput.addEventListener('keypress', function(e) {
            if (e.key === 'Enter') {
                addTextToCanvas();
            }
        });
        
        subOptions.forEach(option => {
            option.addEventListener('click', function() {
                const src = this.getAttribute('data-src');
                const type = this.getAttribute('data-type');
                addAccessory(src, type);
                
                if (currentSubOptions) {
                    currentSubOptions.classList.remove('active');
                    currentSubOptions = null;
                }
            });
        });
        
        function addAccessory(src, type) {
            const accessoryContainer = document.createElement('div');
            accessoryContainer.className = 'personalizer-accessory-container';
            
            const accessory = document.createElement('img');
            accessory.className = 'personalizer-accessory';
            accessory.setAttribute('data-type', type);
            accessory.src = src;
            accessory.alt = type;
            accessory.crossOrigin = 'anonymous';
            
            const controls = document.createElement('div');
            controls.className = 'personalizer-accessory-controls';
            
            const deleteBtn = document.createElement('button');
            deleteBtn.className = 'personalizer-control-btn personalizer-delete-btn';
            deleteBtn.innerHTML = '√ó';
            deleteBtn.title = 'Delete accessory';
            
            const rotateLeftBtn = document.createElement('button');
            rotateLeftBtn.className = 'personalizer-control-btn';
            rotateLeftBtn.innerHTML = '‚Ü∂';
            rotateLeftBtn.title = 'Rotate left';
            
            const rotateRightBtn = document.createElement('button');
            rotateRightBtn.className = 'personalizer-control-btn';
            rotateRightBtn.innerHTML = '‚Ü∑';
            rotateRightBtn.title = 'Rotate right';
            
            const zoomInBtn = document.createElement('button');
            zoomInBtn.className = 'personalizer-control-btn';
            zoomInBtn.innerHTML = '+';
            zoomInBtn.title = 'Zoom in';
            
            const zoomOutBtn = document.createElement('button');
            zoomOutBtn.className = 'personalizer-control-btn';
            zoomOutBtn.innerHTML = '‚àí';
            zoomOutBtn.title = 'Zoom out';
            
            controls.appendChild(deleteBtn);
            controls.appendChild(rotateLeftBtn);
            controls.appendChild(rotateRightBtn);
            controls.appendChild(zoomInBtn);
            controls.appendChild(zoomOutBtn);
            
            accessoryContainer.appendChild(accessory);
            accessoryContainer.appendChild(controls);
            
            let width, height;
            switch(type) {
                case 'tie':
                    width = 80;
                    height = 120;
                    break;
                case 'pocket':
                    width = 70;
                    height = 70;
                    break;
                default:
                    width = 80;
                    height = 80;
            }
            
            accessoryContainer.style.width = `${width}px`;
            accessoryContainer.style.height = `${height}px`;
            
            const canvasRect = designCanvas.getBoundingClientRect();
            const centerX = (canvasRect.width / 2) - (width / 2);
            const centerY = (canvasRect.height / 2) - (height / 2);
            
            accessoryContainer.style.left = `${centerX}px`;
            accessoryContainer.style.top = `${centerY}px`;
            
            accessory.addEventListener('mousedown', startDrag);
            
            deleteBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                designCanvas.removeChild(accessoryContainer);
                accessories = accessories.filter(a => a.container !== accessoryContainer);
            });
            
            let rotation = 0;
            let scale = 1;
            
            rotateLeftBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                rotation -= 15;
                accessoryContainer.style.transform = `rotate(${rotation}deg) scale(${scale})`;
            });
            
            rotateRightBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                rotation += 15;
                accessoryContainer.style.transform = `rotate(${rotation}deg) scale(${scale})`;
            });
            
            zoomInBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                scale *= 1.1;
                accessoryContainer.style.transform = `rotate(${rotation}deg) scale(${scale})`;
            });
            
            zoomOutBtn.addEventListener('click', function(e) {
                e.stopPropagation();
                scale /= 1.1;
                accessoryContainer.style.transform = `rotate(${rotation}deg) scale(${scale})`;
            });
            
            designCanvas.appendChild(accessoryContainer);
            accessories.push({
                container: accessoryContainer,
                element: accessory,
                type: type,
                src: src,
                x: centerX,
                y: centerY,
                width: width,
                height: height,
                rotation: rotation,
                scale: scale
            });
        }
        
        // FIXED DRAG FUNCTIONALITY
        function startDrag(e) {
            // Prevent dragging when clicking on control buttons
            if (e.target.classList.contains('personalizer-control-btn')) {
                return;
            }
            
            activeAccessory = e.target.closest('.personalizer-accessory-container') || e.target.closest('.personalizer-text-container');
            if (!activeAccessory) return;
            
            const rect = activeAccessory.getBoundingClientRect();
            offsetX = e.clientX - rect.left;
            offsetY = e.clientY - rect.top;
            
            document.addEventListener('mousemove', onDrag);
            document.addEventListener('mouseup', stopDrag);
            
            e.preventDefault();
        }
        
        function onDrag(e) {
            if (!activeAccessory) return;
            
            const canvasRect = designCanvas.getBoundingClientRect();
            
            let newX = e.clientX - canvasRect.left - offsetX;
            let newY = e.clientY - canvasRect.top - offsetY;
            
            const accessoryWidth = activeAccessory.offsetWidth;
            const accessoryHeight = activeAccessory.offsetHeight;
            
            newX = Math.max(0, Math.min(newX, canvasRect.width - accessoryWidth));
            newY = Math.max(0, Math.min(newY, canvasRect.height - accessoryHeight));
            
            activeAccessory.style.left = `${newX}px`;
            activeAccessory.style.top = `${newY}px`;
        }
        
        function stopDrag() {
            activeAccessory = null;
            document.removeEventListener('mousemove', onDrag);
            document.removeEventListener('mouseup', stopDrag);
        }
        
        downloadButton.addEventListener('click', function() {
            loadingIndicator.style.display = 'flex';
            
            setTimeout(() => {
                preloadImages().then(() => {
                    html2canvas(designCanvas, {
                        useCORS: true,
                        allowTaint: false,
                        scale: 2,
                        logging: false,
                        backgroundColor: '#f9f9f9',
                        removeContainer: false,
                        foreignObjectRendering: false,
                    }).then(canvas => {
                        const image = canvas.toDataURL('image/png');
                        const link = document.createElement('a');
                        link.download = 'custom-shirt-design.png';
                        link.href = image;
                        
                        document.body.appendChild(link);
                        link.click();
                        document.body.removeChild(link);
                        
                        loadingIndicator.style.display = 'none';
                    }).catch(error => {
                        console.error('Error generating image:', error);
                        alert('Error generating image. Please try again.');
                        loadingIndicator.style.display = 'none';
                    });
                });
            }, 1000);
        });
        
        resetButton.addEventListener('click', function() {
            if (confirm('Are you sure you want to reset your design? All accessories and text will be removed.')) {
                const elements = designCanvas.querySelectorAll('.personalizer-accessory-container, .personalizer-text-container');
                elements.forEach(element => {
                    designCanvas.removeChild(element);
                });
                accessories = [];
                
                colorOptions.forEach(opt => opt.classList.remove('active'));
                colorOptions[0].classList.add('active');
                shirtBase.src = '{{ personalize_product.featured_image | image_url }}';
                
                if (currentSubOptions) {
                    currentSubOptions.classList.remove('active');
                    currentSubOptions = null;
                }
                
                textCustomization.classList.remove('active');
                textInput.value = '';
                livePreviewText.classList.remove('visible');
            }
        });
    });
</script>
{% schema %}
{
  "name": "Custom Personalizer",
  "settings": [
    {
        "type": "product",
        "id": "personalize_product",
        "label": "Select Product",
        "info": "Select Personalize product for customize."
    },
    {
        "type": "header",
        "content": "Personalizer Meta Data"
    },
    {
      "type": "text",
      "id": "color_meta_key",
      "label": "Color Metafield Key",
      "default": "product_colors"
    },
    {
      "type": "text",
      "id": "color_meta_namespace",
      "label": "Color Metafield Namespace",
      "default": "custom"
    },
    {
      "type": "text",
      "id": "color_meta_name",
      "label": "Metaobject Field - Name",
      "default": "name"
    },
    {
      "type": "text",
      "id": "color_meta_image",
      "label": "Metaobject Field - Image",
      "default": "color_image"
    }
  ],
  "blocks": [
    {
      "type": "accessory_category",
      "name": "Accessory Category",
      "settings": [
        {
          "type": "text",
          "id": "category_name",
          "label": "Category Name",
          "info": "This will be used to create the sub-options section"
        },
        {
          "type": "image_picker",
          "id": "category_icon",
          "label": "Style Icon"
        },
        {
            "type": "image_picker",
            "id": "style_1",
            "label": "Style 1"
        },
        {
            "type": "image_picker",
            "id": "style_2",
            "label": "Style 2"
        },
        {
            "type": "image_picker",
            "id": "style_3",
            "label": "Style 3"
        },
        {
            "type": "image_picker",
            "id": "style_4",
            "label": "Style 4"
        },
        {
            "type": "image_picker",
            "id": "style_5",
            "label": "Style 5"
        },
        {
            "type": "image_picker",
            "id": "style_6",
            "label": "Style 6"
        },
        {
            "type": "image_picker",
            "id": "style_7",
            "label": "Style 7"
        },
        {
            "type": "image_picker",
            "id": "style_8",
            "label": "Style 8"
        },
        {
            "type": "image_picker",
            "id": "style_9",
            "label": "Style 9"
        },
        {
            "type": "image_picker",
            "id": "style_10",
            "label": "Style 10"
        },
        {
            "type": "image_picker",
            "id": "style_11",
            "label": "Style 11"
        },
        {
            "type": "image_picker",
            "id": "style_12",
            "label": "Style 12"
        },
        {
            "type": "image_picker",
            "id": "style_13",
            "label": "Style 13"
        },
        {
            "type": "image_picker",
            "id": "style_14",
            "label": "Style 14"
        },
        {
            "type": "image_picker",
            "id": "style_15",
            "label": "Style 15"
        },
        {
            "type": "image_picker",
            "id": "style_16",
            "label": "Style 16"
        },
        {
            "type": "image_picker",
            "id": "style_17",
            "label": "Style 17"
        },
        {
            "type": "image_picker",
            "id": "style_18",
            "label": "Style 18"
        },
        {
            "type": "image_picker",
            "id": "style_19",
            "label": "Style 19"
        },
        {
            "type": "image_picker",
            "id": "style_20",
            "label": "Style 20"
        }
      ]
    }
  ],
  "presets": [
    {
      "name": "Custom Personalizer",
      "category": "Custom"
    }
  ]
}
{% endschema %}